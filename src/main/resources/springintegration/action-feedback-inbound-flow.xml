<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
       xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
  http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
  http://www.springframework.org/schema/integration/xml
  http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd">

    <bean id="actionFeedbackListenerContainer" class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="queueNames" value="Action.Feedback" />
        <property name="concurrentConsumers" value="${messaging.consumingThreads}" />
        <property name="prefetchCount" value="${messaging.prefetchCount}" />
        <property name="txSize" value="${messaging.txSize}" />
        <property name="channelTransacted" value="true" />
    </bean>

    <!-- Xml msg is taken off the queue Action.Feedback and put on the channel actionFeedbackXml -->
    <int:channel id="actionFeedbackXml" />
    <bean id="simpleMessageConverter" class="org.springframework.amqp.support.converter.SimpleMessageConverter" />
    <int-amqp:inbound-channel-adapter id="actionFeedbackInboundAmqp" listener-container="actionFeedbackListenerContainer"
                                      message-converter="simpleMessageConverter" channel="actionFeedbackXml" />

    <!-- Xml validated against the inbound schema -->
    <int:channel id="actionFeedbackInvalidXml" />
    <int-amqp:outbound-channel-adapter id="invalidActionFeedbackOutboundAmqp" channel="actionFeedbackInvalidXml" exchange-name="action-invalid-exchange" routing-key="Action.Feedback.binding" />
    <!-- Option to be used in Debug/Test: throw-exception-on-rejection="true" -->
    <int-xml:validating-filter id="actionFeedbackValidator" input-channel="actionFeedbackXml"
                               output-channel="actionFeedbackXmlValid" schema-location="classpath:actionsvc/xsd/actionFeedback.xsd" discard-channel="actionFeedbackInvalidXml"/>

    <!-- The now validated xml is transformed into the jaxb generated object model -->
    <bean id="actionFeedbackMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="uk.gov.ons.ctp.response.action.message.feedback" />
    </bean>
    <int:channel id="actionFeedbackTransformed" datatype="uk.gov.ons.ctp.response.action.message.feedback.ActionFeedback" />
    <int-xml:unmarshalling-transformer
            input-channel="actionFeedbackXmlValid" output-channel="actionFeedbackTransformed"
            unmarshaller="actionFeedbackMarshaller" />

    <!-- Finally see the @ServiceActivator(inputChannel="actionFeedbackTransformed") -->

    <!-- Start of section to deal with retries and DLQ after max attempts -->
    <int:channel id="actionFeedbackDlqChannel" />

    <bean class="org.springframework.integration.handler.advice.RequestHandlerRetryAdvice" id="actionFeedbackRetryAdvice">
        <property name="recoveryCallback">
            <bean class="org.springframework.integration.handler.advice.ErrorMessageSendingRecoverer">
                <constructor-arg ref="actionFeedbackDlqChannel" />
            </bean>
        </property>
        <property name="retryStateGenerator"> <!-- Important to make it a Stateful Retry -->
            <bean class="org.springframework.integration.handler.advice.SpelExpressionRetryStateGenerator">
                <constructor-arg value="headers.ID"/>
            </bean>
        </property>
        <property name="retryTemplate" ref="retryTemplate" />
    </bean>
    <bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                <property name="initialInterval" value="${messaging.backoffInitial}" />
                <property name="multiplier" value="${messaging.backoffMultiplier}" />
                <property name="maxInterval" value="${messaging.backoffMax}" />
            </bean>
        </property>
        <property name="retryPolicy">
            <bean class="uk.gov.ons.ctp.common.retry.CTPRetryPolicy">
                <constructor-arg type="int">
                    <value>${messaging.maxAttempts}</value>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <int:channel id="actionFeedbackDlqInterimChannel" />
    <int:transformer input-channel="actionFeedbackDlqChannel" output-channel="actionFeedbackDlqInterimChannel" expression="payload.failedMessage.payload" />

    <int:channel id="actionFeedbackDlqChannelXml" />
    <int-xml:marshalling-transformer
            input-channel="actionFeedbackDlqInterimChannel" output-channel="actionFeedbackDlqChannelXml"
            marshaller="actionFeedbackMarshaller"
            result-transformer="actionFeedbackOutboundTransformer"/>
    <bean id="actionFeedbackOutboundTransformer" class="org.springframework.integration.xml.transformer.ResultToStringTransformer" />

    <int-amqp:outbound-channel-adapter id="actionFeedbackDlqAmqp" channel="actionFeedbackDlqChannelXml" exchange-name="action-deadletter-exchange" routing-key="Action.Feedback.binding" />
    <!-- End of section to deal with retries and DLQ after max attempts -->
</beans>
