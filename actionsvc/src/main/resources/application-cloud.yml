info:
  contactEmail: philip.whiles@ons.gov.uk
  version: ${project.version}
  commit: ${buildNumber}
  branch: ${scmBranch}
  buildTime: ${timestamp}

# logging config here as a reminder as to how to override logback from cmd line
# ie -Dlogging.level.org.springframework=DEBUG
logging:
  level:
    uk.gov.ons.ctp: WARN
    org.springframework.cloud.sleuth.instrument.messaging.MessagingSpanExtractor: ERROR
    org.springframework.context.annotation.ConfigurationClassPostProcessor: ERROR
  profile: CLOUD

liquibase:
  user: ${cloud.services.postgresql.connection.username}
  password: ${cloud.services.postgresql.connection.password}
  default-schema: action
  url: ${cloud.services.postgresql.connection.jdbcurl}
  changeLog: classpath:/database/changelog-master.yml

security:
  basic:
    enabled: false
  user:
    name: admin
    password: secret

management:
  port: 8251
  context-path: /mgmt
  security:
    roles: SUPERUSER
    enabled: true
  health:
    rabbit:
      enabled: false
server:
  port: 8151
  servlet-path: /

endpoints:
  autoconfig:
    enabled: true
    sensitive: true
  beans:
    enabled: true
    sensitive: true
  configprops:
    enabled: true
    sensitive: true
  dump:
    enabled: true
    sensitive: true
  env:
    enabled: true
    sensitive: true
  info:
    enabled: true
    sensitive: true
  metrics:
    enabled: true
    sensitive: true
  mappings:
    enabled: true
    sensitive: true
  shutdown:
    enabled: true
    sensitive: true
  trace:
    enabled: true
    sensitive: true

spring:
  output:
    ansi:
      enabled: never
  application:
    name: ONS ActionService
  sleuth:
    sampler:
      percentage: 10

  datasource:
    driverClassName: org.postgresql.Driver
    tomcat:
      initial-size: 5
      max-active: 10
      max-idle: 5
      min-idle: 3
    continue-on-error: true
    schema: classpath:/schema-cloud.sql


  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    properties:
      hibernate:
        ddl-auto: update
        default_schema: action

  zipkin:
    enabled: false

 # all about redis
data-grid:
  # where is redis
  address: ${cloud.services.redis.connection.host}:${cloud.services.redis.connection.port}
  # when we create a list of actions being distib, how long should the list remain in redis after app death
  list-time-to-live-seconds: 600
  # when we try and create a list of ids being distrib how long should we wait to get the lock
  list-time-to-wait-seconds: 600
  #  after app death how long should the lock on all lists remain
  lock-time-to-live-seconds: 600

# the thread that sends actions to handlers
action-distribution:
  # how many actions should we read each time we wake
  retrieval-max: 200
  # how many of the retrieved actions should we send at a time
  distribution-max: 10
  # when we fail to send to rabbit how long should we pause for before retry
  retry-sleep-seconds: 30
  # how long to pause after each distribution exercise
  delay-milli-seconds: 1000

 # the thread that executes plans to create the  actions
plan-execution:
  # pause after each execution exercise
  delay-milli-seconds: 1000

 # calling the case svc endpoints
case-svc:
  case-group-path: /casegroups/{caseGroupId}
  case-by-case-get-path: /cases/{caseid}
  case-events-by-case-get-path: /cases/{caseid}/events
  case-events-by-case-post-path: /cases/{caseid}/events
  address-by-uprn-get-path: /addresses/{uprn}
  case-type-by-id-path: /casetypes/{casetypeid}
  connection-config:
    scheme: http
    host: localhost
    port: 8171
    # how many times should we attempt connection on failure
    retry-attempts: 10
    # sleep between retries
    retry-pause-milli-seconds: 5000
    # time to estab connection
    connect-timeout-milli-seconds: 5000
    # time to read response
    read-timeout-milli-seconds: 5000
# calling the collectionexercise svc endpoints
collection-exercise-svc:
 collection-by-collection-exercise-get-path: /collectionexercises/{id}
 connection-config:
   scheme: http
   host: localhost
   port: 8145
   retry-attempts: 10
   retry-pause-milli-seconds: 5000
   connect-timeout-milli-seconds: 5000
   read-timeout-milli-seconds: 5000

# calling the party svc endpoint
party-svc:
 party-by-sample-unit-type-and-id-path: /party-api/v1/parties/type/{sampleUnitType}/id/{id}
 connection-config:
   scheme: http
   host: ras-party-v2-int.apps.mvp.onsclofo.uk
   port: 80
   # how many times should we attempt connection on failure
   retry-attempts: 10
   # sleep between retries
   retry-pause-milli-seconds: 5000
   # time to estab connection
   connect-timeout-milli-seconds: 5000
   # time to read response
   read-timeout-milli-seconds: 5000
 # looking for the ingest file

csv-ingest:
  directory: /tmp/csv
  file-pattern: '*.csv'
  #the poll-milliseconds property is not used at the moment due to a bug in spring context loading in integration tests
  poll-milliseconds: 10000

# queue related
redelivery-policy:
  maxRedeliveries: -1
  initialRedeliveryDelay: 1000
  redeliveryDelay: 1000

# queue service related
rabbitmq:
  username: ${cloud.services.rabbitmq.connection.username}
  password: ${cloud.services.rabbitmq.connection.password}
  host: ${cloud.services.rabbitmq.connection.host}
  port: ${cloud.services.rabbitmq.connection.port}
  virtualhost: ${cloud.services.rabbitmq.connection.virtualhost}

messaging:
  consumingThreads: 1
  maxAttempts: 1
  prefetchCount: 10
  txSize: 1
